var Enumerable=require("../linq");console.log("\nfirst step of Lambda Expression\n"),Enumerable.range(1,3).select(function(e,n){return n+":"+e}).log().toJoinedString(),Enumerable.range(1,3).select("value,index=>index+':'+value").log().toJoinedString(),Enumerable.range(1,3).select("i=>i*2").log().toJoinedString(),Enumerable.range(1,3).select("$*2").log().toJoinedString(),Enumerable.range(4,7).join(Enumerable.range(8,5),"","","outer,inner=>outer*inner").log().toJoinedString(),console.log("\nScope of lambda expression\n");var number=3;Enumerable.range(1,10).where(function(e){return e==number}).log().toJoinedString(),console.log("\nfrom(Object) -> convert to keyvaluePair\n");var object={foo:"a",bar:100,foobar:!0};Enumerable.from(object).forEach(function(e){console.log(e.key+":"+e.value)}),console.log("\nforEach (continue and break)\n"),Enumerable.repeat("foo",10).forEach(function(e,n){return n%2!=0?n>6?!1:void console.log(n+":"+e):void 0}),console.log("\nGrouping and ref/value comparen\n"),console.log(new Date(2e3,1,1)==new Date(2e3,1,1)),console.log({a:0}=={a:0}),console.log("------");var objects=[{Date:new Date(2e3,1,1),Id:1},{Date:new Date(2010,5,5),Id:2},{Date:new Date(2e3,1,1),Id:3}];Enumerable.from(objects).groupBy("$.Date","$.Id",function(e,n){return{date:e,ids:n.toJoinedString(",")}}).log("$.date + ':' + $.ids").toJoinedString(),console.log("------"),Enumerable.from(objects).groupBy("$.Date","$.Id",function(e,n){return{date:e,ids:n.toJoinedString(",")}},function(e){return e.toString()}).log("$.date + ':' + $.ids").toJoinedString(),console.log("\nRegular Expression matches\n");var input="abcdefgABzDefabgdg";Enumerable.matches(input,"ab(.)d","i").forEach(function(e){for(var n in e)console.log(n+" : "+e[n]);console.log("toString() : "+e.toString()),console.log("---")}),console.log("\nLazyEvaluation and InfinityList\n");var result=Enumerable.toInfinity(1).where("r=>r*r*Math.PI>10000").first();console.log(result),console.log("\nDictionary\n");var cls=function(e,n){this.a=e,this.b=n},instanceA=new cls("a",100),instanceB=new cls("b",2e3),dict=Enumerable.empty().toDictionary(),dict=Enumerable.empty().toDictionary("","",function(e){return e.a+e.b});dict.add(instanceA,"zzz"),dict.add(instanceB,"huga"),console.log(dict.get(instanceA)),console.log(dict.get(instanceB)),dict.toEnumerable().forEach(function(e){console.log(e.key.a+":"+e.value)}),console.log("\nNondeterministic Programs\n");var apart=Enumerable.range(1,5),answers=apart.selectMany(function(e){return apart.selectMany(function(n){return apart.selectMany(function(o){return apart.selectMany(function(t){return apart.select(function(r){return{baker:e,cooper:n,fletcher:o,miller:t,smith:r}})})})})}).where(function(e){return 5==Enumerable.from(e).distinct("$.value").count()}).where("$.baker != 5").where("$.cooper != 1").where("$.fletcher != 1 && $.fletcher != 5").where("$.miller > $.cooper").where("Math.abs($.smith - $.fletcher) != 1").where("Math.abs($.fletcher - $.cooper) != 1");answers.selectMany("").log("$.key + ':' + $.value").toJoinedString();